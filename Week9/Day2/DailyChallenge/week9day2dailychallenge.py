# -*- coding: utf-8 -*-
"""Week9day2dailychallenge.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14OrhNNdoxGBzfks1LVfReajKN7Xalbq4
"""

!pip install kaggle
from google.colab import files

uploaded = files.upload()

for fn in uploaded.keys():
  print('User uploaded file "{name}" with length {length} bytes'.format(
      name=fn, length=len(uploaded[fn])))

# Then move kaggle.json into the folder where the API expects to find it.
!mkdir -p ~/.kaggle/ && mv kaggle.json ~/.kaggle/ && chmod 600 ~/.kaggle/kaggle.json
!kaggle datasets download -d harshitshankhdhar/imdb-dataset-of-top-1000-movies-and-tv-shows
!unzip imdb-dataset-of-top-1000-movies-and-tv-shows.zip

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
df = pd.read_csv('imdb_top_1000.csv')
print(df.head())

df.isnull().sum()
duplicated = df.duplicated(keep='first')
print(duplicated[duplicated == True])
df.drop_duplicates(inplace=True)
df.isnull().sum()
df.dropna(inplace=True)
df.isnull().sum()

df['Released_Year'] = pd.to_datetime(df['Released_Year'], errors='coerce')
df['Year'] = df['Released_Year'].dt.year
sns.lineplot(data=df, x='Year', y='IMDB_Rating')
plt.xticks(rotation=45)

sns.scatterplot(data=df, x='Director', y='IMDB_Rating')
plt.xticks(rotation=45)

from collections import Counter

all_genres = []
for genres in df['Genre']:
    if isinstance(genres, str):  # Check if the entry is a string (not already a list)
        all_genres.extend(genre.strip() for genre in genres.split(','))
    elif isinstance(genres, list):
        all_genres.extend(genres)

genre_counts = Counter(all_genres)
sns.barplot(x=list(genre_counts.keys()), y=list(genre_counts.values()))
plt.xlabel('Genre')
plt.ylabel('Number of Entries')
plt.title('Number of Entries by Genre')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()

print(genre_counts.keys())
print(df['Genre'].head)

df_filtered = df[df['Genre'].str.contains('|'.join(all_genres), na=False)]

# Create the boxplot
plt.figure(figsize=(15, 8))
sns.boxplot(x='Genre', y='IMDB_Rating', data=df_filtered, order=all_genres)

plt.title('IMDB Rating Distribution by Genre')
plt.xlabel('Genre')
plt.ylabel('IMDB Rating')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()

df['Gross'] = df['Gross'].str.replace(',', '', regex=True).astype(float, errors='ignore')
subset = df[['IMDB_Rating', 'Gross', 'Meta_score', 'No_of_Votes']]
sns.heatmap(subset.corr(), annot=True)